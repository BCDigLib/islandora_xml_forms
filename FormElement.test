<?php

// $Id$

/**
 * @file
 * 
 * Unit Tests.
 */

/**
 * Unit Tests for the FormControl class.
 */
class XMLFormAPIFormElementTestCase extends DrupalUnitTestCase {

  /**
   * Get Test info.
   * 
   * @return array
   *   Properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Form Element Unit Tests.',
      'description' => 'Unit tests for FormElement.inc.',
      'group' => 'XML Form API',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen. 
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('xml_form_api');
    module_load_include('inc', 'xml_form_api', 'FormDefinition');
    module_load_include('inc', 'xml_form_api', 'FormElement');
  }

  /**
   * Test constructing the Form definition.
   */
  public function testCreate() {
    /* Basic */
    $form_element = new FormElement();
    $this->assertNotNull($form_element, 'Created basic FormElement.');
    $this->assertNotNull($form_element->controls, 'Created empty set of form controls.');
    /* Basic from XML */
    $form_element = FormElement::createFromXMLDefiniton('<element/>');
    $this->assertNotNull($form_element, 'Created basic FormElement from XML.');
    /* Basic Children */
    $form_element = new FormElement();
    $child = new FormElement();
    $child->name = 'child';
    $form_element->child = $child;
    $this->assertEqual($child->parent, $form_element, 'Child Parent property auto set.');
    $this->assertEqual($child, $form_element->child, 'Access Child via __get function.');
    $this->assertEqual($child, $form_element['child'], 'Access Child via array operator.');
    $child->parent = NULL;
    $this->assertNull($child->parent, 'Removed Child parent reference is null.');
    $this->assertNull($form_element->child, 'Parent reference to removed child via __get is NULL.');
    $this->assertNull($form_element['child'], 'Parent reference to removed child via array access is NULL.');
    /* Basic Form Controls */
    $form_element = new FormElement();
    $form_element->tree = true;
    $this->assertEqual($form_element->tree, TRUE, 'Accessed form control via FormElement __get.');
    $this->assertEqual($form_element['#tree'], TRUE, 'Accessed form control via FormElement array access.');
    $this->assertEqual($form_element->controls->tree, TRUE, 'Accessed form control via FormControls __get.');
    $this->assertEqual($form_element->controls['#tree'], TRUE, 'Accessed form control via FormControls array access.');
    /* via __set */
    $form_element->tree = NULL;
    $this->assertNull($form_element->tree, 'Removed form control reference is NULL via FormElement __get.');
    $this->assertNull($form_element['#tree'], 'Removed form control reference is NULL via FormElement array access.');
    $this->assertNull($form_element->controls->tree, 'Removed form control is NULL via FormControls __get.');
    $this->assertNull($form_element->controls['#tree'], 'Removed form control is NULL via FormControls array access.');
    /* via array access */
    $form_element->tree = true;
    unset($form_element['#tree']);
    $this->assertNull($form_element->tree, 'Removed form control reference is NULL via FormElement __get.');
    $this->assertNull($form_element['#tree'], 'Removed form control reference is NULL via FormElement array access.');
    $this->assertNull($form_element->controls->tree, 'Removed form control is NULL via FormControls __get.');
    $this->assertNull($form_element->controls['#tree'], 'Removed form control is NULL via FormControls array access.');
    /* Test passing elements from one to another */
    $form_element = new FormElement();
    $child = new FormElement();
    $new_parent = new FormElement();
    $form_element['child'] = $child;
    $new_parent->child = $child;
    $this->assertNull($form_element['child'], 'Removed child when assigning the child to a new parent.');
    $this->assertEqual($child->parent, $new_parent, 'Child points to new parent.');
    $this->assertEqual($new_parent['child'], $child, 'Child is attached to new parent.');
    /* Test XML creation */
  }

  function testToDrupalForm() {
    
  }

  function testAsXML() {
    
  }

}