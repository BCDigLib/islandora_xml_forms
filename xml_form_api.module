<?php

// $Id$

/**
 * @file
 *
 */

/**
 * Implementation of Hook Menu.
 *
 * @return array
 */
function xml_form_api_menu() {
  $items['FormDefinition.xsd'] = array(
    'title' => 'Form Definition',
    'description' => 'Returns FormDefinition.xsd',
    'page callback' => 'xml_form_api_get_form_defintion',
    'type' => MENU_CALLBACK,
  );
  $items['test'] = array(
    'title' => 'Test',
    'description' => 'test',
    'page callback' => 'xml_form_api_test',
    'access arguments' => array('administer access control'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu Callback, returns FormDefinition.xsd
 */
function xml_form_api_get_form_defintion() {
  
}

/**
 * 
 */
function xml_form_api_test() {
  return drupal_get_form('xml_form');
}

function xml_form(&$form_state) {
  
  $xml = <<<EOT
  <form xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://localhost/FormDefinition.xsd">
    <properties>
        <document_properties>
            <root>mods:mods</root>
            <namespaces>
                <namespace prefix="mods">http://www.loc.gov/mods/v3</namespace>
            </namespaces>
            <schema name="mods">http://www.loc.gov/standards/mods/v3/mods-3-4.xsd</schema>
        </document_properties>
    </properties>
    <elements>
        <element key="a">
            <type>fieldset</type>
            <title>test</title>
            <tree>true</tree>
            <children>
                <element key="b">
                    <type>fieldset</type>
                    <tree>false</tree>
                    <children>
                        <element key="d">
                            <type>fieldset</type>
                            <tree>true</tree>
                            <children>
                                <element key="e">
                                    <type>textfield</type>
                                    <default_value>0ne</default_value>
                                </element>
                                <element key="f">
                                    <type>fieldset</type>
                                    <tree>true</tree>
                                    <children>
                                        <element key="g">
                                            <type>textfield</type>
                                            <default_value>bluene</default_value>
                                        </element>
                                    </children>
                                </element>
                            </children>
                        </element>
                    </children>
                </element>
                <element key="c">
                    <type>textfield</type>
                    <title>title</title>
                    <xml_properties>
                        <create>
                            <parent_path>/mods:mods</parent_path>
                            <schema_path name="mods">/xs:schema/xs:element[@key='title']</schema_path>
                            <element>mods:title</element>
                        </create>
                    </xml_properties>
                </element>
                <element>
                    <type>submit</type>
                    <value>submit</value>
                </element>
            </children>
        </element>
    </elements>
</form>

EOT;
  module_load_include('inc', 'xml_form_api', 'FormDefinition');
  module_load_include('inc', 'xml_form_api', 'Form');
  module_load_include('inc', 'xml_form_api', 'FormStorage');
  $storage = new FormStorage($form_state);
  $form = new Form($storage);
  if($form->isInitialized()) { // Was initialized from storage.
    return $form->toArray();
  }
  else {
    $definition = new FormDefinition($xml);
    //var_dump($definition->root->children);
    /* Create FormValues */
    $form_state = array(
      'values' => array(
        Form::ROOT => array(
          'a' => array(
            'c' => 'c'
          )
        ),
      )
    );
    module_load_include('inc', 'xml_form_api', 'FormProcessor');
    $form_values = new FormValues($form_state);
    $definition->root->setValue($form_values);
    var_dump($definition->root->children['a']->children['c']);
    $xml_document_properties = $definition->getDocumentProperties();
    $xml_document = new XMLDocument($xml_document_properties);
    $form->initialize($definition, $xml_document); // Hidden Params for extra, but at very least we need the definition.
    return $form->toArray();
  }
}

function xml_form_validate($form, &$form_state) {
  $storage = new FormStorage($form_state);
  $_form = new Form($storage);
  //$_form->validate($form, $form_state);
}

function xml_form_submit($form, &$form_state) {
  $storage = new FormStorage($form_state);
  $form = new Form($storage);
  $form->submit($form, $form_state);
}
