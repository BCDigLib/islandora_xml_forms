<?php

// $Id$

/**
 * @file
 *
 */
module_load_include('inc', 'xml_form_api', 'XMLForm');

/**
 * Implementation of Hook Menu.
 *
 * @return array
 */
function xml_form_api_menu() {
//  $items['XMLFormDefinition.xsd'] = array(
//    'title' => 'Form Definition',
//    'description' => 'Returns XMLFormDefinition.xsd',
//    'page callback' => 'xml_form_api_get_form_defintion',
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//  );
  $items['test'] = array(
    'title' => 'Test',
    'description' => 'test',
    'page callback' => 'xml_form_api_test',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['foo'] = array(
    'title' => 'foo',
    'description' => 'foo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('foo_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Register classes for FormProperties.
 * 
 * @return array
 */
function xml_form_api_objectify_properties() {
  $properties['#actions'] = array(
    'type' => 'inc',
    'module' => 'xml_form_api',
    'name' => 'Actions',
    'class' => 'Actions'
  );
  return $properties;
}

/**
 * Menu Callback, returns FormDefinition.xsd
 */
function xml_form_api_get_form_defintion() {
  
}

function getTestDefinition() {
  $document = new DOMDocument();
  $document->load(drupal_get_path('module', 'xml_form_api') . '/tests/data/definitions/fgdc.xml');
  return $document->saveXML();
}

function getTestDocument() {
  $document = new DOMDocument();
  $document->load(drupal_get_path('module', 'xml_form_api') . '/tests/data/documents/fgdc.xml');
  return $document->saveXML();
}

/**
 * 
 */
function xml_form_api_test() {
  return drupal_get_form('xml_form');
}

function xml_form(&$form_state) {
  $xml_form = new XMLForm($form_state);
  if (!$xml_form->isInitialized()) { // Was initialized from storage.
    module_load_include('inc', 'xml_form_api', 'XMLFormDefinition');
    module_load_include('inc', 'xml_form_api', 'XMLDocument');
    $xml = getTestDefinition();
    $form = XMLFormDefinition::GetDrupalFormDefinition($xml);
    $properties = XMLFormDefinition::GetFormProperties($xml);
    $properties = $properties['document'];
    $test = getTestDocument();
    $document = new XMLDocument($properties['root'], $properties['namespaces'], $properties['schema'], $test);
    $xml_form->initialize($form, $document);
  }
  $output = $xml_form->toArray();
  //var_dump($output['creator']);
  return $output;
}

function xml_form_validate($form, &$form_state) {
  //$form = new Form($form_state);
  //$form->validate($form_state);
}

function xml_form_submit($form, &$form_state) {
  $_form = new XMLForm($form_state);
  $doc = $_form->submit($form, $form_state);
  echo $doc->saveXML();
  //var_dump($doc);
//  Requires some check to make sure its not a ahah callback...
//  $form = new Form($form_state);
//  $document = $form->submit($form_state);
//  Utils::prettyPrintDocument($document);
//  exit();
}

function foo_form(array &$form_state) {
  $definition = array(
    'first' => array(
      '#type' => 'fieldset',
      '#title' => 'first',
      'blah' => array(
        '#type' => 'tabs',
        '#title' => 'First',
        'second' => array(
          '#type' => 'tabpanel',
          'third' => array(
            '#type' => 'textfield',
            '#title' => 'third'
          )
        )
      )
    )
  );
  $xml_form = new XMLForm($form_state);
  //dsm($form_state);
  if (!$xml_form->isInitialized()) {
    $form = $definition;
    $root = array('prefix' => '', 'local_name' => '', 'uri' => '');
    $namespaces = array();
    $schema = '';
    $document = new XMLDocument($root, $namespaces, $schema);
    $xml_form->initialize($form, $document);
  }
  $output = $xml_form->toArray();
  dsm($output['first']['blah']);
  //$value = $form_state['values']['blah']['second']['third'];
  //$output['first']['blah']['second']['third']['#value'] = $value;
  //$output['first']['blah']['second']['third']['#default_value'] = $value;
  /*$first = array(
  '#parents' => array(0, 'first', 'blah', 'second', 'third')
  );
  form_set_value($output['first']['blah']['second']['third'], $value, $form_state); */
  //dsm($output['first']['blah']['second']['third']);
  return $output;
}

function foo_form_submit($form, $form_state) {
  $form_state['rebuild'] = TRUE;
}