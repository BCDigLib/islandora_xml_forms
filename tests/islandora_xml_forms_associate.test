<?php
/**
 * @file
 * Tests for XML Form association functionality.
 */

class IslandoraXMLFormAssociationTestCase extends IslandoraCollectionWebTestCase {
  /**
   * Test information.
   *
   * @see IslandoraWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Islandora XML Form Association',
      'description' => 'Tests Islandora XML form association functionality.',
      'group' => 'Islandora XML Forms',
    );
  }

  /**
   * Set up the test environment.
   *
   * @see IslandoraWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp(array(
      'islandora_basic_collection',
      'xml_form_builder',
      'islandora_test_cm',
    ));
  }

  /**
   * Test form association functions.
   */
  public function testFormAssociationFunctions() {

    // Log in.
    $user = $this->drupalCreateUser(array_keys(module_invoke_all('permission')));
    $this->drupalLogin($user);

    $label = $this->randomName();
    $collection_pid = 'islandora:' . $this->randomName();
    $this->createTestCollection($label, array('islandora:testCModel'), $collection_pid);

    // Disable an association! The only association, actually.
    $this->drupalGet('admin/islandora/xmlform/Test Solution Pack MODS Form/associations');
    // Before we get going, let's make sure we won't encounter a million errors.
    if (!$this->assertLink('Disable')) {
      return;
    }
    $disable_links = $this->xpath('//a[normalize-space(text())=Disable]');
    if (isset($disable_links[1])) {
      // http://www.youtube.com/watch?v=sqcLjcSloXs
      $this->fail("There are multiple 'Disable' links on the Test Solution Pack MODS form association page. This shouldn't be the case at all; this test will not continue as it relies on the assumption that there can be only one.");
      return;
    }
    $this->clickLink("Disable");
    $this->drupalGet("islandora/object/$collection_pid/manage/overview/ingest");
    $this->assertText("Select file to upload", "Collection with no form associations skips directly to file upload step.", 'Islandora');

    // Create a new form association with several customizations.
    $dsid = $this->randomName();
    $custom_transform_filename = $this->randomName() . ".xsl";
    $self_transform_filename = $this->randomName() . ".xsl";
    file_put_contents(DRUPAL_ROOT . "/sites/all/modules/islandora_xml_forms/builder/transforms/" . $custom_transform_filename, file_get_contents(drupal_get_path('module', 'islandora_test_cm') . "/xsl/mods_to_dc_custom.xsl"));
    file_put_contents(DRUPAL_ROOT . "/sites/all/modules/islandora_xml_forms/builder/self_transforms/" . $self_transform_filename, file_get_contents(drupal_get_path('module', 'islandora_test_cm') . "/xsl/self_transform.xsl"));
    $template = <<<TEMPLATE
<?xml version="1.0"?>
<mods xmlns="http://www.loc.gov/mods/v3" xmlns:mods="http://www.loc.gov/mods/v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink">
    <titleInfo>
        <title>Title</title>
    </titleInfo>
    <abstract>Abstract</abstract>
    <language>
        <languageTerm authority="iso639-2b" type="code">Language</languageTerm>
    </language>
    <genre>alternate</genre>
</mods>
TEMPLATE;
    db_insert('xml_form_builder_form_associations')
      ->fields(array(
        'content_model' => 'islandora:testCModel',
        'form_name' => 'Test Solution Pack MODS Form',
        'dsid' => $dsid,
        'title_field' => 'a:2:{i:0;s:9:"titleInfo";i:1;s:5:"title";}',
        'transform' => $custom_transform_filename,
        'self_transform' => $self_transform_filename,
        'template' => $template,
      ))
      ->execute();

    // Check that the template is applied during ingest steps, then ingest.
    $this->drupalGet("islandora/object/$collection_pid/manage/overview/ingest");
    $this->assertFieldById('edit-titleinfo-title', 'Title', "Title from template is filled in.", 'Islandora');
    $this->assertFieldById('edit-abstract', 'Abstract', "Abstract from template is filled in.", 'Islandora');
    $this->assertFieldById('edit-language', 'Language', "Language from template is filled in.", 'Islandora');
    $this->assertFieldById('edit-genre', 'alternate', "Genre from template is selected.", 'Islandora');
    $this->drupalPost("islandora/object/$collection_pid/manage/overview/ingest", array(), 'Next');
    $edit = array(
      'files[file]' => drupal_get_path('module', 'islandora_test_cm') . "/tests/fixtures/test.txt",
    );
    $this->drupalPost(NULL, $edit, 'Ingest');
    $page_title = $this->xpath('//h1[@id="page-title"]');
    $this->assertTrue(trim($page_title[0]) === "Title", "Page title correctly pulled from MODS DSID's titleInfo/title field.", 'Islandora');
    $object_pid = $this->getObjectFromPath($this->url);

    // Let's check out the metadata for this new object!
    if ($this->assertDatastreams($object_pid, array($dsid, 'DC'))) {

      // MODS metadata.
      $object_xml = $this->curlExec(array(
        CURLOPT_URL => url("islandora/object/$object_pid/datastream/$dsid/download", array('absolute' => TRUE)),
        CURLOPT_NOBODY => FALSE,
      ));
      file_put_contents('/tmp/modsthingy.xml', $object_xml);
      $mods_xml = new DOMDocument();
      $mods_xml->loadXML($object_xml);
      $title = $mods_xml->getElementsByTagName('title');
      $note = $mods_xml->getElementsByTagName('note');
      $type_of_resource = $mods_xml->getElementsByTagName('typeOfResource');
      $language = $mods_xml->getElementsByTagName('languageTerm');
      $genre = $mods_xml->getElementsByTagName('genre');
      if (is_object($title->item(0))) {
        $this->assertTrue($title->item(0)->nodeValue == 'Title', "MODS 'titleInfo/title' field matches template title.", 'Islandora');
      }
      else {
        $this->fail("No MODS 'title' field entries found.", 'Islandora');
      }
      if (is_object($note->item(0))) {
        $this->assertTrue($note->item(0)->nodeValue == 'Abstract', "MODS 'note' field matches template abstract carried over via XSLT self-transformation.", 'Islandora');
      }
      else {
        $this->fail("No MODS 'note' field entries found.", 'Islandora');
      }
      if (is_object($type_of_resource->item(0))) {
        $this->assertTrue(trim($type_of_resource->item(0)->nodeValue) == 'Resource', "MODS 'typeOfResource' field added correctly via XSLT self-transformation.", 'Islandora');
      }
      else {
        $this->fail("No MODS 'typeOfResource' field entries found.", 'Islandora');
      }
      if (is_object($language->item(0))) {
        $this->assertTrue($language->item(0)->nodeValue == 'Language', "MODS 'language/languageTerm' field matches template language.", 'Islandora');
      }
      else {
        $this->fail("No MODS 'languageTerm' field entries found.", 'Islandora');
      }
      if (is_object($genre->item(0))) {
        $this->assertTrue($genre->item(0)->nodeValue == 'alternate', "MODS 'genre' field matches template genre.", 'Islandora');
      }
      else {
        $this->fail("No MODS 'genre' field entries found.", 'Islandora');
      }

      // DC Metadata.
      $object_xml = $this->curlExec(array(
        CURLOPT_URL => url("islandora/object/$object_pid/datastream/DC/download", array('absolute' => TRUE)),
        CURLOPT_NOBODY => FALSE,
      ));
      file_put_contents('/tmp/dcthingy.xml', $object_xml);
      $dc_xml = new DOMDocument();
      $dc_xml->loadXML($object_xml);
      $title = $dc_xml->getElementsByTagNameNS("http://purl.org/dc/elements/1.1/", 'title');
      $note = $dc_xml->getElementsByTagNameNS("http://purl.org/dc/elements/1.1/", 'description');
      $type = $dc_xml->getElementsByTagNameNS("http://purl.org/dc/elements/1.1/", 'type');
      $language = $dc_xml->getElementsByTagNameNS("http://purl.org/dc/elements/1.1/", 'language');
      $identifier = $dc_xml->getElementsByTagNameNS("http://purl.org/dc/elements/1.1/", 'identifier');
      if (is_object($title->item(0))) {
        $this->assertTrue($title->item(0)->nodeValue == 'Title', "DC 'title' field was correctly transformed using custom XSLT.", 'Islandora');
      }
      else {
        $this->fail("No DC 'title' field entries found.", 'Islandora');
      }
      if (is_object($note->item(0))) {
        $this->assertTrue($note->item(0)->nodeValue == 'Transformed Note', "DC 'description' field was correctly transformed using custom XSLT.", 'Islandora');
      }
      else {
        $this->fail("No DC 'description' field entries found.", 'Islandora');
      }
      if (is_object($type->item(0))) {
        $this->assertTrue($type->item(0)->nodeValue == 'Transformed Resource', "First DC 'type' field (MODS typeOfResource) was correctly transformed using custom XSLT.", 'Islandora');
      }
      else {
        $this->fail("No first DC 'type' field entries found.", 'Islandora');
      }
      if (is_object($language->item(0))) {
        $this->assertTrue($language->item(0)->nodeValue == 'Transformed Language', "DC 'language' field was correctly transformed using custom XSLT.", 'Islandora');
      }
      else {
        $this->fail("No DC 'language' field entries found.", 'Islandora');
      }
      if (is_object($type->item(1))) {
        $this->assertTrue($type->item(1)->nodeValue == 'Transformed Genre', "Second DC 'type' field (MODS 'genre') was correctly transformed using custom XSLT.", 'Islandora');
      }
      else {
        $this->fail("No second DC 'type' field entries found.", 'Islandora');
      }
      if (is_object($identifier->item(0))) {
        $this->assertTrue($identifier->item(0)->nodeValue == $object_pid, "DC 'identifier' field was correctly set to the object PID using custom XSLT.", 'Islandora');
      }
      else {
        $this->fail("No DC 'identifier' field entries found.", 'Islandora');
      }
    }
    else {
      $this->fail("Object $object_pid was not created with appropriate datastreams of $dsid and/or DC.", 'Islandora');
    }

    // Get rid of those custom XSLTs.
    unlink(DRUPAL_ROOT . "/sites/all/modules/islandora_xml_forms/builder/transforms/" . $custom_transform_filename);
    unlink(DRUPAL_ROOT . "/sites/all/modules/islandora_xml_forms/builder/self_transforms/" . $self_transform_filename);

    // Re-enable the association!
    $this->drupalGet('admin/islandora/xmlform/Test Solution Pack MODS Form/associations');
    if (!$this->assertLink('Enable')) {
      return;
    }
    $this->clickLink('Delete');
    $this->clickLink('Enable');
    $this->drupalGet("islandora/object/$collection_pid/manage/overview/ingest");
    $this->assertField('abstract', "Collection with replaced form association loads form during ingest.", 'Islandora');
  }
}
