<?php

// $Id$

/**
 * @file
 * 
 * Unit Tests.
 */

/**
 * Unit Tests.
 */
class XMLFormAPIFormProcessorTestCase extends DrupalUnitTestCase {

  /**
   * Get Test info.
   * 
   * @return array
   *   Properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Form Processor Unit Tests.',
      'description' => 'Unit tests for FormProcessor.inc.',
      'group' => 'XML Form API',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen. 
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('xml_form_api');
    module_load_include('inc', 'xml_form_api', 'FormProcessor');
    module_load_include('inc', 'xml_form_api', 'FormElement');
    module_load_include('inc', 'xml_form_api', 'FormDefinition');
    module_load_include('inc', 'xml_form_api', 'Form');
  }

  /**
   * Test constructing the Form definition.
   */
  public function testCreate() {
    /* Throw Exception on invalid form state */
    try {
      $form_state = array();
      $form_values = new FormValues($form_state);
    } catch (Exception $e) {
      $this->pass('Threw exception when constructor given invalid parameters');
    }
    /* Test getValue */
    $xml = <<<EOT
    <form xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://localhost/FormDefinition.xsd">
    <properties>
        <document_properties>
            <root>mods:mods</root>
            <namespaces>
                <namespace prefix="mods">http://www.loc.gov/mods/v3</namespace>
            </namespaces>
            <schema name="mods">http://www.loc.gov/standards/mods/v3/mods-3-4.xsd</schema>
        </document_properties>
    </properties>
    <elements>
        <element key="a">
            <type>fieldset</type>
            <title>test</title>
            <tree>true</tree>
            <children>
                <element key="b">
                    <type>fieldset</type>
                    <tree>false</tree>
                    <children>
                        <element key="d">
                            <type>fieldset</type>
                            <tree>true</tree>
                            <children>
                                <element key="e">
                                    <type>textfield</type>
                                    <default_value>0ne</default_value>
                                </element>
                                <element key="f">
                                    <type>fieldset</type>
                                    <tree>true</tree>
                                    <children>
                                        <element key="g">
                                            <type>textfield</type>
                                            <default_value>bluene</default_value>
                                        </element>
                                    </children>
                                </element>
                            </children>
                        </element>
                    </children>
                </element>
                <element key="c">
                    <type>textfield</type>
                    <title>title</title>
                    <xml_properties>
                        <create>
                            <parent_path>/mods:mods</parent_path>
                            <schema_path name="mods">/xs:schema/xs:element[@key='title']</schema_path>
                            <element>mods:title</element>
                        </create>
                    </xml_properties>
                </element>
                <element>
                    <type>submit</type>
                    <value>submit</value>
                </element>
            </children>
        </element>
    </elements>
</form>
EOT;
    /* Create FormValues */
    $form_state = array(
      'values' => array(
        Form::ROOT => array(
          'a' => array(
            'c' => 'c'
          )
        ),
      )
    );
    $form_values = new FormValues($form_state);
    $element = simplexml_load_string($xml);
    $def = new FormDefinition($xml);
    //$def->root->setValue($form_values);
    //var_dump($def->root);
    $this->assertEqual($def->root->children['a']->children['c']->value, 'c', 'FormValue::getValue');
  }

}